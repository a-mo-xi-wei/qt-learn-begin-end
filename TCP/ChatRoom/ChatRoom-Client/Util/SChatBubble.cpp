#include"SChatBubble.h"

#include<QPainter>
#include<QResizeEvent>
#include<QPainterPath>

#define SpaceWidth() (_xOffset + m_profileRect.width() + 5 * m_textMargin)

unsigned char pix_default_head[] = { 0x89,0x50,0x4e,0x47,0x0d,0x0a,0x1a,0x0a,0x00,0x00,0x00,0x0d,0x49,0x48,0x44,0x52,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x40,0x08,0x06,0x00,0x00,0x00,0xaa,0x69,0x71,0xde,0x00,0x00,0x00,0x01,0x73,0x52,0x47,0x42,0x00,0xae,0xce,0x1c,0xe9,0x00,0x00,0x05,0x9c,0x49,0x44,0x41,0x54,0x78,0x5e,0xe5,0x9b,0xcd,0x6f,0x1b,0x45,0x14,0xc0,0xdf,0xdb,0xd8,0x6e,0xa1,0x71,0xeb,0x26,0x29,0x2a,0x29,0x81,0x38,0x5c,0x90,0xa8,0x40,0xe2,0x00,0xa8,0x34,0xd0,0xdc,0x8a,0x52,0x09,0x0e,0x48,0x70,0x41,0x24,0x87,0x48,0x88,0x13,0x95,0x2a,0x71,0xa3,0x2e,0xfc,0x03,0x5c,0x2a,0x21,0x05,0x29,0xe9,0x0d,0x10,0x07,0x0e,0xa0,0x72,0x40,0x4a,0x20,0x69,0x85,0x54,0x09,0x09,0x44,0x11,0x48,0x10,0xaf,0x88,0x9a,0x56,0xd4,0x75,0x1c,0xb9,0xa5,0x89,0xbd,0x99,0x41,0x6f,0x93,0xb5,0xd7,0xde,0xac,0x77,0x76,0x77,0xde,0xe6,0xa3,0x73,0xb2,0xbd,0xb3,0x33,0xf3,0x7e,0xef,0x63,0xde,0x7c,0x18,0x21,0x81,0xd2,0x5b,0xfc,0x71,0x4c,0x02,0x3e,0x01,0x02,0x07,0xa9,0x3b,0x89,0x72,0x10,0x81,0x3e,0x4b,0xfb,0x3b,0x00,0x9a,0x12,0xa4,0x69,0x7f,0x92,0x68,0x82,0x21,0x4d,0x01,0xf0,0x03,0x80,0x65,0x56,0xf2,0x23,0xf6,0xef,0x5c,0x05,0xb9,0x1a,0xb6,0x85,0x16,0xc6,0x2b,0x80,0x72,0x2c,0x4e,0x1f,0x12,0x60,0x16,0x11,0x66,0x05,0x58,0x97,0x38,0x60,0x68,0x05,0x40,0x42,0x0b,0x89,0xef,0x20,0xc0,0xa9,0x38,0x42,0xfb,0xbd,0x4b,0x30,0x0c,0x94,0x97,0xd6,0x61,0x7d,0x56,0x17,0x0c,0x2d,0x00,0x72,0xc5,0xb9,0x53,0x28,0xe1,0x3c,0x97,0xe0,0x5e,0x20,0x68,0x22,0x8a,0x0b,0x3a,0x40,0xc4,0x02,0x90,0xbc,0xe0,0xad,0x28,0x74,0x58,0x44,0x64,0x00,0x87,0x17,0xe6,0x66,0x92,0xd3,0x78,0x67,0x87,0x22,0x10,0x12,0xad,0xf1,0x28,0x6e,0x11,0x1a,0x40,0xae,0x38,0x33,0x88,0x32,0x35,0xb5,0x53,0x84,0x6f,0xa2,0x41,0x53,0x60,0x7d,0x24,0x2c,0x84,0x50,0x00,0xc8,0xe4,0x0d,0x09,0x33,0x1c,0x01,0x4e,0x57,0x9b,0x88,0x72,0xfc,0x4e,0xfe,0xe5,0x69,0xd5,0xf6,0x94,0x01,0xf4,0x14,0xe7,0xce,0x83,0x84,0x82,0x6a,0xc3,0xdb,0x5a,0x0f,0xa1,0xa0,0x3a,0x6d,0x2a,0x01,0xd8,0x55,0xc2,0x6f,0x92,0x57,0x8d,0x0b,0x81,0x00,0xec,0x84,0x46,0xe2,0xd4,0xb6,0x6a,0x34,0x6a,0xe7,0x08,0x85,0x72,0x7e,0xf8,0x42,0xa7,0xd7,0x3b,0x02,0xd8,0x0d,0x3e,0x1f,0xc8,0x26,0x00,0x82,0x2f,0x00,0x8a,0xf6,0x86,0x4c,0x15,0x03,0x3b,0xd8,0x05,0x15,0x04,0x5a,0x79,0xbf,0xd9,0xc1,0x17,0xc0,0x4e,0x9a,0xe7,0xe3,0x33,0xf6,0x9f,0x22,0xb7,0x04,0xb0,0x1b,0x83,0x5e,0x10,0x24,0x0a,0x8a,0xcb,0x43,0xc3,0x23,0xed,0xf5,0x3c,0x00,0xf6,0x92,0xe9,0x7b,0x84,0xdd,0x22,0x47,0xf0,0x00,0xd8,0x8b,0xda,0xef,0x94,0x2d,0xb6,0x00,0xd8,0xcb,0xda,0x77,0x20,0xb4,0x67,0x8a,0x2d,0x00,0x7a,0xfe,0x9e,0x9f,0x8a,0xbb,0x81,0x11,0xe4,0x8b,0xdb,0xff,0xbc,0x35,0x20,0x36,0x00,0x3c,0x08,0xda,0x6f,0xc0,0x77,0xe5,0x06,0x0d,0x00,0x7b,0xdb,0xf7,0xbd,0xfb,0x08,0xce,0x8c,0xd0,0x04,0xb0,0x30,0x27,0x93,0x34,0xcf,0xfe,0xd4,0x3e,0xbb,0xbb,0xa3,0xa9,0x0c,0xdc,0xb2,0x6a,0xb0,0x64,0xad,0x25,0xd9,0x3d,0x38,0xc9,0x91,0x0d,0x20,0x29,0xf3,0x27,0xa1,0x47,0xbb,0x7b,0x61,0x34,0xdb,0x07,0x0e,0x00,0x47,0x6a,0x02,0xf0,0xf3,0x6a,0x15,0x3e,0x5b,0x5e,0x4a,0x04,0x86,0x13,0x0c,0x6d,0x00,0x49,0x98,0xff,0x44,0xae,0x1f,0x26,0x0e,0x1f,0x0b,0xd4,0x32,0x81,0xf8,0xb6,0x5a,0x82,0xc9,0xca,0x52,0x60,0xdd,0x38,0x15,0x9c,0xc4,0xc8,0x06,0xc0,0x9d,0xf6,0x7e,0xfa,0xe8,0x53,0xf0,0xdc,0xfe,0x6c,0xa8,0xf1,0x12,0x88,0xf7,0x6e,0xfe,0xc9,0x6a,0x0d,0xe4,0x06,0xc8,0x6d,0xfe,0x51,0x84,0x77,0xbb,0xc5,0xeb,0x8b,0xbf,0x86,0x02,0x17,0xa6,0xb2,0x40,0x18,0x41,0xce,0x25,0xef,0x99,0xee,0x3e,0xf8,0xf0,0x48,0x3e,0xcc,0x98,0x3c,0x75,0xbf,0xb9,0x5b,0x82,0x8f,0x6e,0x33,0x2d,0x4a,0x11,0x0a,0xc8,0xb9,0xe1,0xf1,0xf5,0xc0,0x33,0x9e,0x60,0x17,0x96,0x06,0xb9,0x02,0x01,0xa0,0x00,0xa9,0xbd,0x48,0x9c,0x46,0xae,0x00,0xa8,0x43,0xfb,0x8e,0xc0,0x6c,0x56,0xc0,0x09,0x80,0x4c,0x9f,0x20,0xe8,0x28,0x64,0x05,0x1c,0xb1,0xc0,0x3e,0x77,0xe4,0xca,0xff,0x75,0x98,0xbf,0x1b,0x1e,0x01,0xd0,0x9f,0x2c,0xa1,0x89,0x5c,0x53,0xa0,0x6e,0x00,0xef,0xde,0xfc,0x83,0x25,0x0e,0xec,0x1a,0x00,0x6c,0x16,0xc0,0xe5,0x02,0x71,0xe6,0xff,0xad,0xe2,0xc6,0xf3,0xc5,0x6b,0x3a,0xc2,0x49,0x5b,0x1b,0x68,0xb2,0xc5,0x00,0xd5,0xd4,0x57,0x45,0x2a,0xae,0x59,0xc0,0x0e,0x82,0x5c,0x79,0x00,0xa5,0xbe,0x64,0x05,0x3a,0x0a,0x17,0x00,0xa0,0x69,0x90,0x0b,0x00,0x09,0xae,0xcb,0x0d,0x78,0xcc,0x9f,0x2e,0x24,0x41,0x81,0x35,0x15,0xd6,0x61,0x05,0x93,0xcb,0x37,0xf8,0x56,0x86,0x04,0xc0,0x5e,0x0e,0x2f,0xcc,0x17,0x9b,0x37,0xb6,0x74,0x18,0x6d,0xb3,0x8d,0x38,0xb1,0x80,0xd2,0x5f,0x9a,0xfe,0xb8,0x8a,0xbd,0x18,0x4a,0x62,0x39,0x1c,0x05,0x02,0x9b,0xdf,0x37,0x68,0xa2,0x59,0x1e,0x3a,0x99,0xb7,0x01,0x70,0xc6,0x01,0xa7,0x3f,0xda,0x01,0xa2,0xf4,0x38,0x68,0x5f,0x20,0xa9,0x0d,0x11,0xf2,0x7f,0x3a,0x39,0xde,0xdc,0x12,0x4b,0xee,0xe6,0x07,0x01,0x38,0xb3,0xb9,0x25,0x46,0xfb,0x81,0x4e,0xa1,0x5d,0x20,0x2a,0xdc,0x3b,0x41,0x4d,0x03,0x70,0x01,0xe0,0x8e,0x03,0x5c,0x3e,0x1c,0xa7,0xdd,0xf2,0xd0,0xb0,0xad,0xfc,0x07,0x72,0x5b,0x9c,0xae,0xe6,0x92,0xff,0xb7,0x00,0xd8,0xd8,0x1a,0x4b,0xcf,0x70,0xcd,0x06,0x71,0xb4,0xa5,0xfb,0x5d,0xf7,0xf1,0x58,0xeb,0xd1,0x18,0xf3,0x45,0xa8,0x43,0x46,0x4a,0x59,0x96,0x15,0x61,0x29,0xd7,0x0d,0x57,0xb1,0xa9,0xfd,0x16,0x0b,0xa0,0x2f,0xba,0xad,0xe0,0xe9,0x7d,0x0f,0xc3,0xe3,0x99,0x0c,0x3c,0x96,0xce,0x40,0x18,0xe1,0x69,0x2c,0x8b,0xf5,0x8d,0x83,0x92,0xc5,0x5a,0x0d,0xae,0xaf,0xdd,0x07,0x5d,0x40,0x68,0xee,0xaf,0xe4,0x87,0x67,0x1d,0x68,0x2c,0xc7,0xe3,0x03,0xe9,0x0c,0x9c,0xce,0xe6,0x42,0x0b,0xdd,0x49,0x93,0x97,0xab,0x15,0xb8,0xbe,0xf6,0x5f,0x38,0x65,0x7b,0x6a,0xb7,0x6a,0xdf,0x63,0x01,0x4e,0xfd,0x38,0x99,0xe1,0xab,0xd9,0x1c,0x90,0xe6,0x39,0x0a,0x59,0xc5,0x77,0xd5,0x95,0xc8,0xd6,0xd0,0xae,0x7d,0x7f,0x00,0x11,0x63,0xc1,0x89,0x87,0xb2,0x70,0xe2,0x40,0xb8,0x03,0x90,0xb0,0xa0,0xc8,0x15,0xbe,0xac,0x94,0x43,0x43,0x50,0xbe,0x22,0xd3,0xb0,0x82,0x90,0x10,0xc8,0xec,0xdf,0x3c,0xa4,0x67,0x13,0x34,0x08,0xca,0xd5,0x7b,0x55,0xb8,0x7a,0x3f,0xcc,0x36,0xb9,0xd7,0xf4,0x7d,0x63,0x80,0xbb,0x73,0x55,0x57,0xa0,0x00,0x37,0xd1,0xf3,0x48,0xd0,0xb8,0xb5,0x3e,0x9f,0x2c,0xff,0xab,0x68,0x05,0xfe,0xc2,0xfb,0xba,0x80,0x33,0x52,0xd5,0x59,0x21,0x09,0xd3,0x6f,0xa7,0x47,0x01,0x91,0x02,0x63,0x50,0xd9,0xca,0xef,0xdd,0xef,0x04,0x5e,0x95,0x55,0x81,0xc0,0x19,0xf8,0xfc,0x04,0xa4,0x58,0x40,0x56,0xd0,0xa9,0xa8,0xdc,0x1c,0x0f,0x04,0x40,0x1d,0x6c,0x9c,0x1e,0xe1,0x98,0x5f,0x96,0x78,0xae,0xaf,0x3f,0x48,0x11,0x2c,0xcf,0x3b,0xba,0x81,0xc2,0x3d,0xe1,0x40,0x17,0x70,0x8f,0x7a,0xe3,0x10,0x95,0x2e,0x4d,0x3b,0x7f,0x75,0xdb,0x78,0xba,0x1d,0xfe,0xef,0x8c,0xeb,0x8b,0x95,0x12,0x2c,0xd6,0x6b,0x1e,0xb8,0x41,0x66,0x1f,0xca,0x05,0x5a,0x21,0x78,0xd7,0x0b,0x49,0x46,0xff,0x76,0x49,0xbd,0xc9,0x11,0xdd,0x00,0x93,0xe3,0xee,0x4c,0x2f,0xc8,0xf4,0x94,0x5c,0xa0,0xbd,0x11,0xf7,0x59,0xc2,0x4e,0x01,0xe0,0x37,0xcf,0xb3,0x00,0x70,0xc7,0x85,0x81,0x74,0x7a,0x30,0xa9,0xf9,0xdf,0xd7,0x02,0x24,0x4e,0x97,0x9f,0x3c,0x39,0x1e,0x24,0xec,0x56,0xcf,0x23,0x59,0x80,0xbb,0xa1,0x97,0x6e,0x5c,0xbb,0x3c,0x9a,0xed,0x39,0x1d,0xa5,0xf3,0xb8,0xef,0x5c,0xb9,0x57,0x9d,0xbf,0xb2,0xba,0xfc,0x76,0xd8,0x3f,0x4a,0x45,0x8e,0x01,0x7e,0x03,0x9e,0x28,0xff,0xf6,0x16,0x0a,0xe3,0xe3,0xde,0x54,0xd7,0x60,0xd6,0x48,0xa9,0xaf,0x79,0x23,0x12,0x28,0x59,0xf5,0x5b,0x55,0xb0,0xce,0x4e,0xf6,0x1c,0xff,0x3c,0x62,0x13,0x8d,0xd7,0x62,0x5b,0x80,0x7b,0x00,0x04,0x22,0x03,0xa9,0x0f,0x0e,0x1a,0x78,0x9c,0x03,0x84,0x59,0x5b,0xfb,0xab,0x2c,0xeb,0x17,0xbf,0x3a,0xf2,0xec,0x27,0x71,0x05,0x77,0xde,0xd7,0x0a,0xc0,0x3d,0xa8,0x37,0x6e,0xff,0xf2,0x7e,0x37,0x74,0xbd,0x76,0x2c,0x93,0x79,0x51,0x48,0x99,0x8a,0x0a,0xa4,0xb4,0x5e,0x9f,0xaf,0x4a,0xeb,0xa2,0x0e,0x6d,0xb3,0xc4,0x00,0x55,0x4d,0x10,0x90,0x83,0x98,0x3e,0x2a,0xa4,0x78,0xe1,0x40,0x57,0x2a,0x57,0x17,0xa2,0x7b,0xbf,0x61,0xd8,0xab,0xa7,0x55,0x21,0x4a,0x69,0xc3,0xb8,0x6b,0x09,0x61,0xae,0x88,0xf5,0x3b,0xff,0xd4,0xeb,0xdf,0xff,0x5e,0x5b,0xf9,0x29,0x8e,0x6f,0xab,0x8e,0xeb,0x7f,0x9f,0xdd,0xe3,0xed,0x87,0x3e,0x0b,0xa5,0x00,0x00,0x00,0x00,0x49,0x45,0x4e,0x44,0xae,0x42,0x60,0x82 };

SChatBubble::SChatBubble(QWidget* parent)
    :SChatBubble(QPixmap(),"xxxxxxxxxxxx")
{
}

SChatBubble::SChatBubble(const QPixmap &head_img, const QString &message, BubbleType type,QWidget*parent)
    :QLabel(parent)
    ,m_type(type)
    ,m_message(message)
    ,m_head_img(head_img)
{
    this->init();
	if (head_img.isNull())
	{
		auto img =  QImage::fromData(pix_default_head,1506,"PNG");
		m_head_img = QPixmap::fromImage(img);
	}
    QLabel::setText(m_message);
}
void SChatBubble::init()
{
	//resize(640, 480);
	setAlignment(Qt::AlignTop);
	setWordWrap(true);
	setTextInteractionFlags(Qt::TextInteractionFlag::TextSelectableByMouse);
	QLabel::setFont(QFont("楷体", 18));

	//头像矩形
	m_profileRect.setSize(QSize(42,42));
}

void SChatBubble::setMessage(const QPixmap& head_img,const QString& message, SChatBubble::BubbleType type)
{
	m_type = type;
	m_message = message;
	m_head_img = head_img;

	QLabel::setText(m_message);
}

int  SChatBubble::textHeight()const
{
	return this->fontMetrics().boundingRect(QRect(), Qt::AlignLeft, m_message).height();
}

void SChatBubble::paintEvent(QPaintEvent* ev)
{
	QPainter painter(this);
	painter.setRenderHint(QPainter::RenderHint::Antialiasing);

	painter.setPen(Qt::PenStyle::NoPen);
	painter.setBrush(QColor(60, 172, 213));

	//绘制头像	
	painter.drawPixmap(m_profileRect, m_head_img);

	//绘制气泡
	painter.drawRoundedRect(m_bubbleRect, 10, 10);

	//绘制三角形
	painter.drawPolygon(m_points);

	//测试文本框
	if (0)
	{
		painter.setPen(Qt::GlobalColor::red);
		painter.setBrush(Qt::BrushStyle::NoBrush);
		painter.drawRect(m_textRect);
	}

	QLabel::paintEvent(ev);
}

void SChatBubble::resizeEvent(QResizeEvent* ev)
{
	updateTextRect();
	updateBubbleSize();

	auto listw = QListWidgetItem::listWidget();
	if (listw)
	{
		QListWidgetItem::setSizeHint(QSize(1,size().height()));
	}

}

void SChatBubble::updateBubbleSize()
{
	if (m_type == SChatBubble::BubbleLeft)
	{
		m_profileRect.moveTopLeft(QPoint(_xOffset, _yOffset));

		m_bubbleRect = m_textRect.adjusted(-m_textMargin, -m_textMargin, m_textMargin, m_textMargin);
		
		m_points.clear();
		m_points.append(QPointF(m_bubbleRect.x(), m_bubbleRect.y() + 21 - 6));
		m_points.append(QPointF(m_bubbleRect.x(), m_bubbleRect.y() + 21 + 12 - 6));
		m_points.append(QPointF(m_bubbleRect.x() - 6, m_bubbleRect.y() + 21));

	}
	else if (m_type == SChatBubble::BubbleRight)
	{
		m_profileRect.moveTopRight(QPoint(width() - _xOffset, _yOffset));
		
		m_bubbleRect = m_textRect.adjusted(-m_textMargin, -m_textMargin, m_textMargin, m_textMargin);
		
		m_points.clear();
		m_points.append(QPointF(m_bubbleRect.right(), m_bubbleRect.y() + 21 - 6));
		m_points.append(QPointF(m_bubbleRect.right(), m_bubbleRect.y() + 21 + 12 - 6));
		m_points.append(QPointF(m_bubbleRect.right() + 6, m_bubbleRect.y() + 21));
		
	}

	setFixedHeight(m_bubbleRect.height() + 1 * m_textMargin);
	//QListWidgetItem::setSizeHint(QSize(QListWidgetItem::sizeHint().width(), height()));
	//QListWidgetItem::setSizeHint(QSize(QListWidgetItem::sizeHint().width(), m_bubbleRect.height() + 1 * m_textMargin));

	setContentsMargins(
		m_textRect.x(),
		m_textRect.y(),
		width() - (m_textRect.right() + 1),
		height() - (m_textRect.bottom() + 1)
	);
}

void SChatBubble::updateTextRect()
{
	auto fm = this->fontMetrics();
	auto bRect = fm.boundingRect(QRect(), Qt::AlignLeft, m_message);

	//m_textRect = rect();
	if (m_type == SChatBubble::BubbleLeft)
	{
		m_textRect.moveTopLeft(QPoint(
				_xOffset + m_profileRect.width() + 3 * m_textMargin,
				_yOffset + m_textMargin
			));

		if (bRect.width() <= width() - SpaceWidth())
		{
			m_textRect.setSize(bRect.size());
		}
		else
		{
			m_textRect.setWidth(width() - SpaceWidth());
			m_textRect.setHeight(realLineNumber() * fm.lineSpacing() + fm.lineSpacing() / 2);

			//if(QListWidgetItem::listWidget())QListWidgetItem::listWidget()->scrollToBottom();
		}
	}
	else if (m_type == SChatBubble::BubbleRight)
	{
		if (bRect.width() <= width() - SpaceWidth())
		{
			m_textRect.setX(width() - bRect.width() - m_profileRect.width() - 3 * m_textMargin);
			m_textRect.setY(_yOffset + m_textMargin);;
			m_textRect.setSize(bRect.size());
		}
		else
		{
			m_textRect.setX(_xOffset + 2 * m_textMargin);
			m_textRect.setY(m_textMargin);

			m_textRect.setWidth(width() - SpaceWidth());
			m_textRect.setHeight(realLineNumber() * fm.lineSpacing() + fm.lineSpacing() / 2);
			//if (QListWidgetItem::listWidget())QListWidgetItem::listWidget()->scrollToBottom();
		}
	}
}

QList<int> SChatBubble::textWidthList()const
{
	QList<int> list;
	auto fm = this->fontMetrics();

	qsizetype lineFeedpos = 0;		////\n的位置
	QString tstr = m_message;
	for (int i = 0; i < tstr.length(); i = lineFeedpos + 1)
	{
		lineFeedpos = tstr.indexOf("\n", i);
		//最后不是\n，需要补加一行
		if (lineFeedpos == -1)
		{
			int curLineW = fm.boundingRect(QRect(), Qt::AlignLeft, tstr.mid(i)).width();
			list.append(curLineW);
			break;
		}
		else
		{
			int curLineW = fm.boundingRect(QRect(), Qt::AlignLeft, tstr.mid(i, lineFeedpos - i)).width();
			list.append(curLineW);
		}


	}
	return list;
}

int SChatBubble::lineNumber() const
{
	return 	textWidthList().size();
}

int SChatBubble::realLineNumber() const
{
	auto list = textWidthList();
	int nLine = list.size();

	for (auto w : list)
	{
		auto num = w / m_textRect.width();
		//只有一行
		if (num == 0)
		{

		}
		//多出一行(一行太长，容纳不下了，就换行了，就多了一行)
		else
		{
			nLine += num;
		}
	}
	return nLine;
}
